#include<bits/stdc++.h>
using namespace std;

bool isSafe(int **arr, int x, int y, int n) {
    // Checking column above the current position
    for (int row = 0; row < x; row++) {
        if (arr[row][y] == 1) return false;
    }
    // Checking upper left diagonal
    int row = x, col = y;
    while (row >= 0 && col >= 0) {
        if (arr[row][col] == 1) {
            return false;
        }
        row--;
        col--;
    }
    // Checking upper right diagonal
    row = x, col = y;
    while (row >= 0 && col < n) {
        if (arr[row][col] == 1) {
            return false;
        }
        row--;
        col++;
    }
    return true; // No threats found
}

bool nQueens(int **arr, int x, int n) {
    if (x >= n) {
        return true; // All queens placed successfully
    }
    for (int i = 0; i < n; i++) {
        if (isSafe(arr, x, i, n)) {
            arr[x][i] = 1; // Place queen
            if (nQueens(arr, x + 1, n)) {
                return true; // Recursive call
            }
            arr[x][i] = 0; // Backtrack
        }
    }
    return false; // No valid place for this row
}

int main() {
    int n;
    cin >> n;
    
    // Dynamically allocate memory for the 2D array
    int **arr = new int *[n];
    for (int i = 0; i < n; i++) {
        arr[i] = new int[n]; // Allocate each row
        for (int j = 0; j < n; j++) {
            arr[i][j] = 0; // Initialize to 0
        }
    }

    if (nQueens(arr, 0, n)) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "Solution does not exist" << endl;
    }
}
