#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
private:
    vector<int> tree;
    int n;

public:
    SegmentTree(vector<int>& arr) {
        n = arr.size();
        tree.resize(2 * n);

        build(arr);
    }

    void build(vector<int>& arr) {
        for (int i = 0; i < n; i++)
            tree[n + i] = arr[i];

        for (int i = n - 1; i > 0; --i)
            tree[i] = tree[i << 1] + tree[i << 1 | 1];
    }

    void updateTreeNode(int p, int value) {
        tree[p + n] = value;
        p = p + n;

        for (int i = p; i > 1; i >>= 1)
            tree[i >> 1] = tree[i] + tree[i ^ 1];
    }

    int query(int l, int r) {
        int res = 0;

        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l & 1)
                res += tree[l++];

            if (r & 1)
                res += tree[--r];
        }

        return res;
    }
};

int main() {
    vector<int> a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

    SegmentTree segTree(a);

    // Print the sum in range(1,2) index-based
    cout << segTree.query(1, 3) << endl;

    // Modify element at 2nd index
    segTree.updateTreeNode(2, 1);

    // Print the sum in range(1,2) index-based after update
    cout << segTree.query(1, 3) << endl;

    return 0;
}
