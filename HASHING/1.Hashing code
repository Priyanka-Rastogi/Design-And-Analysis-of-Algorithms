#include<bits/stdc++.h>
using namespace std;
#define MAX 100

bool search(int x, bool hashTable[MAX + 1][2]) {
    if (x >= 0) {
        if (hashTable[x][0] == 1) {
            return true;
        }
        else {
            return false;
        }
    } else {
        x = abs(x);
        if (hashTable[x][1] == 1) {
            return true;
        } else {
            return false;
        }
    }
}

void insert(int a[], int n, bool hashTable[MAX + 1][2]) {
    for (int i = 0; i < n; i++) {
        if (a[i] >= 0) {
            hashTable[a[i]][0] = 1;
        } else {
            hashTable[abs(a[i])][1] = 1;
        }
    }
}

int main() {
    int arr[] = {1, -3, 5, 7, -2};
    bool hashTable[MAX + 1][2] = {0};  // Initialize the hashTable to false
    int n = sizeof(arr) / sizeof(arr[0]);
    insert(arr, n, hashTable);
    int find = -1;
    if (search(find, hashTable)) {
        cout << "Element is present" << endl;
    } else {
        cout << "Element is not present" << endl;
    }
    return 0;
}
